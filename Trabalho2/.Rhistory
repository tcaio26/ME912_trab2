# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"A entrada 'y' deve ser uma string com o nome da variável dependente.")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
test_that("Verificações de erro", {
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"A entrada 'y' deve ser uma string com o nome da variável dependente.")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
# Testar se todas as colunas de 'dados' são numéricas
x <- salarios[, -which(names(salarios) == "salario")]
expect_true(all(sapply(x, is.double)), "TRUE")
})
test_that("Teste da função de regressão", {
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
test_that("Teste da função de predição", {
# Obter os coeficientes da regressão
resultado_regressao <- regressao(salarios, "salario")
beta_hat <- resultado_regressao$beta_hat
# Criar um novo conjunto de dados para predição
novos_dados <- data.frame(
id= c(1001, 1002, 1003),
idade = c(30, 45, 50),
altura = c(175, 180, 165),
peso = c(80, 90, 70),
anos_estudando = c(12, 16, 14),
filhos = c(1, 2, 0)
)
preditos_novos <- predicao(novos_dados, beta_hat)
expect_equal(length(preditos_novos), nrow(novos_dados))
})
test_that("Teste da função de gráficos", {
resultado <- regressao(salarios, "salario")
graficos_resultado <- graficos(resultado$preditos, resultado$preditos, resultado$residuos)
expect_s3_class(graficos_resultado$preditos_vs_observados, "gg")
expect_s3_class(graficos_resultado$residuos, "gg")
})
test_that("Verificações de erro", {
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"A entrada 'y' deve ser uma string com o nome da variável dependente.")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
# Testar se todas as colunas de 'dados' são numéricas
x <- salarios[, -which(names(salarios) == "salario")]
expect_true(all(sapply(x, is.double)), "TRUE")
})
readr::read_csv("salarios.csv")
getwd
getwd()
# Carregar os dados simulados
salarios <- readr::read_csv("Trabalho2/salarios.csv")
getwd
getwd()
# Carregar os dados simulados
salarios <- readr::read_csv("salarios.csv")
devtools::test()
# Carregar os dados simulados
salarios <- readr::read_csv("../salarios.csv")
# Carregar os dados simulados
salarios <- readr::read_csv("../salarios.csv")
getwd()
# Carregar os dados simulados
salarios <- readr::read_csv("salarios.csv")
test_that("Teste da função de regressão", {
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
library(testthat)
library(dplyr)
# Carregar os dados simulados
salarios <- readr::read_csv("salarios.csv")
test_that("Teste da função de regressão", {
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
library(ggplot2)
library(ggplot2)
graficos <- function(observados, preditos, residuos) {
# Criar um data frame com observados, preditos e resíduos
dados <- data.frame(
Observados = as.vector(observados),
Preditos = as.vector(preditos),
Residuos = as.vector(residuos)
)
# Gráfico de observados vs preditos
grafico_preditos_vs_observados <- ggplot(dados, aes(x = Observados, y = Preditos)) +
geom_point(color = "blue") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Valores Observados vs Preditos", x = "Observados", y = "Preditos") +
theme_bw()
# Gráfico dos resíduos
grafico_residuos <- ggplot(dados, aes(x = Observados, y = Residuos)) +
geom_point(color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Gráfico de Resíduos", x = "Observados", y = "Resíduos") +
theme_bw()
# Retornar os gráficos como uma lista
return(list(preditos_vs_observados = grafico_preditos_vs_observados,
residuos = grafico_residuos))
}
predicao <- function(novos_dados, beta_hat) {
# Verificar se 'novos_dados' é um data frame
if (!is.data.frame(novos_dados)) {
stop("A entrada 'novos_dados' deve ser um data frame.")
}
# Verificar se todos os preditores são numéricos
if (!all(sapply(novos_dados, is.numeric))) {
stop("Todos os preditores devem ser numéricos.")
}
# Adicionar a coluna de intercepto
novos_dados <- as.matrix(cbind(1, novos_dados))
# Calcular as predições
preditos_novos <- novos_dados %*% beta_hat
return(preditos_novos)
}
library(ggplot2)
graficos <- function(observados, preditos, residuos) {
# Criar um data frame com observados, preditos e resíduos
dados <- data.frame(
Observados = as.vector(observados),
Preditos = as.vector(preditos),
Residuos = as.vector(residuos)
)
# Gráfico de observados vs preditos
grafico_preditos_vs_observados <- ggplot(dados, aes(x = Observados, y = Preditos)) +
geom_point(color = "blue") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Valores Observados vs Preditos", x = "Observados", y = "Preditos") +
theme_bw()
# Gráfico dos resíduos
grafico_residuos <- ggplot(dados, aes(x = Observados, y = Residuos)) +
geom_point(color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Gráfico de Resíduos", x = "Observados", y = "Resíduos") +
theme_bw()
# Retornar os gráficos como uma lista
return(list(preditos_vs_observados = grafico_preditos_vs_observados,
residuos = grafico_residuos))
}
##variaveis: id, idade, altura, peso, salario, anos_estudando, filhos
library(faux)
library(GGally)
library(dplyr)
dados = data.frame(id=0,idade=0,anos_estudando=0,filhos=0,salario=0)
set.seed(247005)
id = idade = salario = anos_estudando = filhos = 0
for(i in 1:1000){
id = i
idade = round(rgamma(1, 35,1), 0)
anos_estudando = ifelse(idade>22, rnorm(1,16,1.5), ifelse(idade<6,0,rnorm(1,idade-6,1)))
filhos = ifelse(idade>17,floor(rgamma(1,idade-10,15)),0)
salario = ((0.9^filhos)*((idade-16)/5)*(2/3)+(log(anos_estudando))+rnorm(1,2,1))*3000
dados = rbind(dados, c(id, idade, anos_estudando, filhos, salario))
}
dados = dados[-1,] %>% cbind(data.frame(rnorm_multi(1000, 2, mu = c(165, 65), sd = c(8, 7), r = 0.6, varnames = c('altura','peso')))) %>%
dplyr::select(c('id', 'idade', 'altura', 'peso', 'anos_estudando', 'filhos', 'salario'))
ggpairs(dados[,-1])
lm(salario~., dados) %>% summary()
write.csv(dados, "salarios.csv", row.names = FALSE)
library(testthat)
library(Trabalho2)
devtools::document()
devtools::document()
roxygen2::roxygenize()
roxygen2::roxygenize()
install.packages("roxygen2")
document()
library(devtools)
document()
library(testthat)
library(Trabalho2)
install.packages("devtools")
install.packages("devtools")
library(devtools)
# Navegue até o diretório do seu pacote
setwd("caminho/para/seu/pacote/Trabalho2")
getwd
getwd()
setwd("/Documentos/Trabalho2")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
library(testthat)
library(Trabalho2)
# Carregar os dados simulados
salarios <- readr::read_csv("salarios.csv")
test_that("Teste da função de regressão", {
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
Trabalho2::regressao(salarios,"salario")
library(testthat)
library(Trabalho2)
test_check("Trabalho2")
salarios <- readr::read_csv("salarios.csv")
test_that("Teste da função de regressão", {
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::test()
devtools::test()
usethis::use_test()
salarios <- readr::read_csv("salarios.csv")
test_that("Teste da função de regressão", {
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
test_that("Teste da função de predição", {
# Obter os coeficientes da regressão
resultado_regressao <- regressao(salarios, "salario")
beta_hat <- resultado_regressao$beta_hat
# Criar um novo conjunto de dados para predição
novos_dados <- data.frame(
id= c(1001, 1002, 1003),
idade = c(30, 45, 50),
altura = c(175, 180, 165),
peso = c(80, 90, 70),
anos_estudando = c(12, 16, 14),
filhos = c(1, 2, 0)
)
preditos_novos <- predicao(novos_dados, beta_hat)
expect_equal(length(preditos_novos), nrow(novos_dados))
})
test_that("Teste da função de gráficos", {
resultado <- regressao(salarios, "salario")
graficos_resultado <- graficos(resultado$preditos, resultado$preditos, resultado$residuos)
expect_s3_class(graficos_resultado$preditos_vs_observados, "gg")
expect_s3_class(graficos_resultado$residuos, "gg")
})
usethis::use_data(salarios, overwrite = TRUE)
data("salarios")
# Nomear o primeiro coeficiente como "intercepto"
beta_hat <- setNames(as.vector(beta_hat), c("intercepto", colnames(x)[-1]))
{
dados<- na.omit(dados)
# Verificar se 'dados' é um data frame
if (!is.data.frame(dados)) {
stop("A entrada 'dados' deve ser um data frame.")
}
# Verificar se 'y' é uma string
if (!is.character(y) || length(y) != 1) {
stop("A entrada 'y' deve ser uma string com o nome da variável dependente.")
}
# Verificar se 'y' está presente em 'dados'
if (!y %in% colnames(dados)) {
stop(paste("A variável", y, "não está presente no data frame 'dados'."))
}
x <- select(dados, -all_of(y))
# Verificar se existem preditores
if (ncol(x) == 0) {
stop("Não existem variáveis preditoras após remover 'y'.")
}
if (!all(sapply(x, is.numeric))) {
stop("Todos os preditores devem ser numéricos.")
}
x <- as.matrix(cbind(1, x))
y <- as.matrix(select(dados, all_of(y)))
beta_hat<- solve(t(x) %*% x) %*% t(x) %*% y
# Nomear o primeiro coeficiente como "intercepto"
beta_hat <- setNames(as.vector(beta_hat), c("intercepto", colnames(x)[-1]))
preditos <- x %*% beta_hat
residuos <- y - preditos
return(list(beta_hat = beta_hat, preditos = preditos, residuos = residuos))
}
regressao <- function(dados, y){
dados<- na.omit(dados)
# Verificar se 'dados' é um data frame
if (!is.data.frame(dados)) {
stop("A entrada 'dados' deve ser um data frame.")
}
# Verificar se 'y' é uma string
if (!is.character(y) || length(y) != 1) {
stop("A entrada 'y' deve ser uma string com o nome da variável dependente.")
}
# Verificar se 'y' está presente em 'dados'
if (!y %in% colnames(dados)) {
stop(paste("A variável", y, "não está presente no data frame 'dados'."))
}
x <- select(dados, -all_of(y))
# Verificar se existem preditores
if (ncol(x) == 0) {
stop("Não existem variáveis preditoras após remover 'y'.")
}
if (!all(sapply(x, is.numeric))) {
stop("Todos os preditores devem ser numéricos.")
}
x <- as.matrix(cbind(1, x))
y <- as.matrix(select(dados, all_of(y)))
beta_hat<- solve(t(x) %*% x) %*% t(x) %*% y
# Nomear o primeiro coeficiente como "intercepto"
beta_hat <- setNames(as.vector(beta_hat), c("intercepto", colnames(x)[-1]))
preditos <- x %*% beta_hat
residuos <- y - preditos
return(list(beta_hat = beta_hat, preditos = preditos, residuos = residuos))
}
regressao(salarios,"salario")
teste<-regressao(salarios,"salario")
teste$beta_hat
regressao <- function(dados, y){
dados<- na.omit(dados)
# Verificar se 'dados' é um data frame
if (!is.data.frame(dados)) {
stop("A entrada 'dados' deve ser um data frame.")
}
# Verificar se 'y' é uma string
if (!is.character(y) || length(y) != 1) {
stop("A entrada 'y' deve ser uma string com o nome da variável dependente.")
}
# Verificar se 'y' está presente em 'dados'
if (!y %in% colnames(dados)) {
stop(paste("A variável", y, "não está presente no data frame 'dados'."))
}
x <- select(dados, -all_of(y))
# Verificar se existem preditores
if (ncol(x) == 0) {
stop("Não existem variáveis preditoras após remover 'y'.")
}
if (!all(sapply(x, is.numeric))) {
stop("Todos os preditores devem ser numéricos.")
}
x <- as.matrix(cbind(1, x))
y <- as.matrix(select(dados, all_of(y)))
beta_hat<- solve(t(x) %*% x) %*% t(x) %*% y
rownames(beta_hat) <- c("intercepto", colnames(x)[-1])
preditos <- x %*% beta_hat
residuos <- y - preditos
return(list(beta_hat = beta_hat, preditos = preditos, residuos = residuos))
}
teste<-regressao(salarios,"salario")
teste$beta_hat
test_that("Teste da função de regressão", {
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"A entrada 'y' deve ser uma string com o nome da variável dependente.")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
# Testar se todas as colunas de 'dados' são numéricas
x <- salarios[, -which(names(salarios) == "salario")]
expect_true(all(sapply(x, is.double)), "TRUE")
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"A entrada 'y' deve ser uma string com o nome da variável dependente.")
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"Erro: objeto 'salario' não encontrado")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
# Testar se todas as colunas de 'dados' são numéricas
x <- salarios[, -which(names(salarios) == "salario")]
expect_true(all(sapply(x, is.double)), "TRUE")
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
test_that("Teste da função de regressão", {
# Testar erro se 'dados' não é um dataframe
expect_error(regressao(matrix(1:10, nrow=5), "salario"),
"A entrada 'dados' deve ser um data frame.")
# Testar se a variável 'y' não foi escrita como string
expect_error(regressao(salarios, salario),
"Erro: objeto 'salario' não encontrado")
# Testar erro se 'y' não está presente no dataframe
expect_error(regressao(salarios, "renda"),
"A variável 'renda' não está presente no data frame 'dados'.")
# Testar se todas as colunas de 'dados' são numéricas
x <- salarios[, -which(names(salarios) == "salario")]
expect_true(all(sapply(x, is.double)), "TRUE")
# Testar se a função retorna uma lista
resultado <- regressao(salarios, "salario")
expect_type(resultado, "list")
# Testar se os coeficientes estão corretos
expect_true("beta_hat" %in% names(resultado))
expect_true(is.matrix(resultado$beta_hat))
# Testar se os preditos têm o mesmo comprimento que os dados
expect_equal(length(resultado$preditos), nrow(salarios) - sum(is.na(salarios)))
# Testar se os resíduos têm o mesmo comprimento que os dados
expect_equal(length(resultado$residuos), nrow(salarios) - sum(is.na(salarios)))
})
test_that("Teste da função de predição", {
# Obter os coeficientes da regressão
resultado_regressao <- regressao(salarios, "salario")
beta_hat <- resultado_regressao$beta_hat
# Criar um novo conjunto de dados para predição
novos_dados <- data.frame(
id= c(1001, 1002, 1003),
idade = c(30, 45, 50),
altura = c(175, 180, 165),
peso = c(80, 90, 70),
anos_estudando = c(12, 16, 14),
filhos = c(1, 2, 0)
)
preditos_novos <- predicao(novos_dados, beta_hat)
expect_equal(length(preditos_novos), nrow(novos_dados))
})
test_that("Teste da função de gráficos", {
resultado <- regressao(salarios, "salario")
graficos_resultado <- graficos(resultado$preditos, resultado$preditos, resultado$residuos)
expect_s3_class(graficos_resultado$preditos_vs_observados, "gg")
expect_s3_class(graficos_resultado$residuos, "gg")
})
